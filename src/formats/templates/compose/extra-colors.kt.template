<%= androidLicenseHeader() %>

@file:Suppress("all")
package <%= file.packageName %>

import androidx.compose.runtime.Stable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.graphics.Color
<%= options.import.map(function(item) {
    return 'import ' + item
  }).join('\n') %>

<%= fileHeader({file, commentStyle: 'short'}) %>

<%
function colorName(prop) {
  let name = prop.name.replace(/^color/, "");
  return name.charAt(0).toLowerCase() + name.slice(1);
}
%>

/**
  * This class holds all the semantic tokens of the Compound theme.
  */
@Stable
class <%= file.className %>(
<%= allProperties.map(function(prop) {
    return '    ' + colorName(prop) + ': Color,'
  }).join('\n')
%>
    isLight: Boolean,
) {
    var isLight by mutableStateOf(isLight)
        private set
<%= allProperties.map(function(prop) {
  let comment = "";
  if (prop.description) {
    comment = `    /** ${prop.description} */\n`
  }
  return comment + '    var ' + colorName(prop) + ' by mutableStateOf(' + colorName(prop) + ')\n        private set'
}).join('\n' ) %>

    fun copy(
<%= allProperties.map(function(prop) {
    return '        ' + colorName(prop) + ': Color = this.' + colorName(prop) + ','
  }).join('\n')
%>
        isLight: Boolean = this.isLight,
    ) = <%= file.className %>(
<%= allProperties.map(function(prop) {
    return '        ' + colorName(prop) + ' = ' + colorName(prop) + ','
  }).join('\n')
%>
        isLight = isLight,
    )

    fun updateColorsFrom(other: <%= file.className %>) {
<%= allProperties.map(function(prop) {
    return '        ' + colorName(prop) + ' = other.' + colorName(prop)
  }).join('\n')
    %>
        isLight = other.isLight
    }
}
